BRIEF EXPLANATION
==================
pyRMSD goal is the fast (and easy!) calculation of rmsd matrices of large ensembles of protein conformations. 

USING IT
=========
To use the module the first thing will be to extract all the coordinates from a PDB file. Coordinates must be stored in the same 
storage format that Prody does. So if you don't have it yet, get it! (unless you want to replicate their job :P).
In fact, you can use prody through a wrapper in 'utils.py' (see 'pyRMSD/pyRMSD/test/test.py for a usage example).


(coordinates_set, number_of_conformations, atoms_per_conformation)  = getCoorsetsFromPDB(pdb_path)
--------------------------------------------------------------------------------------------------
Will return a tuple with all the coordinates of all the frames inside the PDB, the number of conformations, and the number of 
atoms per conformation. 'pdb_path' is the path of the PDB file to be parsed.

This coordinates can directly feed the two actual functions you will need for rmsd calculation. This 2 functions are located 
into the 'RMSD.py' module and are:


rmsd = oneVsTheOthers(target,coordsets,calcType)
-----------------------------------------
Will calculate the RMSD of conformation 'target' (an integer from 0 to the number of conformations) with the conformations from 
'target'+1 to number_of_conformations. It will return a vector with the corresponding rmsds.


rmsd = calculateRMSDCondensedMatrix(coordsets,calcType)
-------------------------------------------------------
Will calculate the all vs all rmsd matrix (with ALL the pairwise superpositions). As the resulting matrix is symmetric and its 
diagonal is 0, it will store only the upper diagonal triangle (condensed matrix), in the same way scipy.spatial.distance.pdist
does (http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html).


For both functions possible calculator types (calcType) are:
"PYTHON_CALCULATOR" 	- To use the Python implementation.
"SERIAL_CALCULATOR" 	- To use the C Serial implementation.
"OMP_CALCULATOR" 	- To use the C Serial implementation with OpenMP.
"CUDA_CALCULATOR" 	- To use the CUDA implementation.

DEPENDENCIES
=============
You will need Numpy, Lapack, the Cuda stuff and maybe some other things just to make it run. You will also need 

INSTALLATION
=============
To install it just copy the pyRMSD folder (the one with an __init__.py file inside) wherever you want. Just remember to add it to your 
PYTHONPATH in order to be able to use it from outside.

BUILDING
=========
In the case you need to rebuild it, use the build.sh shell script to do it. This script will generate all the needed objects for the C
extensions and will place the library to import into the pyRMSD package folder (in this case pyRMSD/pyRMSD/).
I haven't used distutils as it was giving me lots of problems. 
Note that, because we don't have CUDA source code, at this time 
If you want to build you will also need [[numpy development package]] with the headers and [[LAPACK]].

TESTING
========
In order to test your build go to the folder pyRMSD/pyRMSD/test, uncompress amber_long.tar.bz and run test.py (python test.py). It will 
test all the implementations and do a benchmark on your computer.

FUTURE IMPROVEMENTS
===================
Adding CUDA source code or build using Yutong Zhao's released library.
Adding no-CUDA build.
Adding more documentation.
Using distutils for building and installation.
Improving this README.

Credits and Thanks
==================
- Yutong Zhao for its cuda rmsd code (unreleased yet). One can get the compiled objets from his blog (http://proteneer.com/blog/) .

- Manuel Rivero, Ryoji Takahasi and Israel Cabeza de Vaca for the serial rmsd code (part of PELE++ project).

- Helper functions where extracted from http://www.scipy.org/Cookbook/C_Extensions/NumPy_arrays, by Lou Pecora if I'm not wrong.

- The Python implementation of superposition was extracted from Prody source code (by Ahmet Bakan [http://www.csb.pitt.edu/People/abakan/]), with
the only goal of providing a framework for improving the code.

- All the other stuff (wrapping, improvements, etc) was done by myself: Víctor Gil Sepúlveda.

I hope it will be helpful for you all.